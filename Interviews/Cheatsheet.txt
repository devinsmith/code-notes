/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// C++ CHEATSHEET
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[1] Always use ++a as a++ returns a copy of the object before it is incremented;
    ++a returns a reference after it is incremented.

[2] If you only need a pointer or reference to an object, forward declare
    the object to keep the namepsace clean. Use the #include in the .cpp

[3] Only use std::move/std::foward when returning rvalue references by-value to 
    prevent a copy being made. Using otherwise may prevent Return Value 
    Optimization from occuring.

[4] All single argument constructors must be declared with 'explicit' to
    prevent unwanted casting to the single argument's type.

[5] unsigned int overflow wraps to 0, signed int overflow is undefined

[6] Prefer nullptr to NULL and avoid pointer, int and long overload combinations.
    NULL is either 0/0L and prefers int/long overloads to pointer ones when passed as argument.
    nullptr will only take pointer overloads when passed as argument.

[7] Member variables initialized in order they appear in class declaration,
    not in intialization list. Always keep list in same order as class .h.
    Always initialise members in constructor initialisation list as it's
    must quicker than assigning in the body

[8] sizeof on an int gives the size of the int. 
    sizeof on an array gives the size of the whole array.

[9] String literals are not constant but changing individual characters is.
    char * one = "one"; one = "two" can be done.
    char * lit = "literal"; lit[0] = 'h' cannot be done.

[10] Order that function arguments/calls are evaluated is up to the complier.
     MyFn(getA(), myInt); getA/myInt called in any order
     y = x++ - getA(); x++/getA evaluated in any order
     getA() && getB(); conditional logic always left to right

[11] 'this' can be used in constructor except to call virtual functions 
      which is undefined behaviour. Base version will be called but dangerous

[12] void MyFn(int arr[2]) is the same as void MyFn(int arr[]), the number is 
     only a suggestion and an array of any size can be passed in. Make the paramter
     a reference to enforce size: void MyFn(int (&arr) [2])

[13] Assigning/Copying by-val from Derived to Base causes slicing where 
     the derived information is lost

[14] Virtual methods can't be templates as templates generated at compile time
     and virtual method type solved at run-time.

[15] Don't store an array of derived class objects in a base class pointer.
     Pointer arithmatic uses sizeof(Baseclass), not sizeof(Derivedclass)
     delete [] myArray and myArray[x] also uses pointer arithmatic

[16] Type of object/pointer determines the visibility of methods called
     even if pointer holds derived object. Known as non-virtual interface idiom

[17] Never redefine default variables from the base class; base class 
     pointers will always use base class default values.

[18] Throw by value; catch by reference to allow polymorphism.
     Never throw pointers as memory may not exist when unwinding the stack.

[19] With #define f(x) make sure to include brackets around the x inside the
     defined body: ((x)+=2) in case x is an expression

[20] Most Vexing Parse Pitfall: compiler sees these as function declarations
     MyClass obj(MyClass2(value));
     MyClass obj();

[21] Between two sequence points a variable must not be modified more than once. 
     Eg. i = ++i is bad.

[22] Destructors should never throw: if unwinding the stack from an 
     exception and a destructor throws the program is terminated

[23] Never use unsigned int when looping backwards to 0. When decrementing past
     zero the unsigned int will cycle over and the loop will not end

[24] For pointer math a[i] is the same as i[a] as its converted to *(a + i)

[25] std::function is larger/slower than internal type of lambdas obtained through auto
     only use std::function when necessary

[26] Read pointer types backwards from first *
     const int * is the same as int const *

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STL CHEATSHEET
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[1] Always use Empty() instead of Size() == 0 as Empty() is always constant time
    while Size() can be linear time lookup depending on the container

[2] Inserting/Removing causes most cached iterators/pointers/references to be 
    invalidated depending on the container type. This includes iterators in a loop.

[3] Deque/Stack/Queue are not safe with pointer maths as memory not all in 
    one piece. Stores data in various chucks with pointers to keep track of 
    next lot. Use iterators to traverse.

[4] myMap[key] = "something" will add an entry if the key doesn't exist

[5] vector<bool> is not a container and vector<bool>::iterator is not random-access, 
    forward or bi-directional. The bitset containers also have more flexibility in methods.
    
[6] Never use auto_ptr with a container. Containers often copy and assign
    and create temporary copies of data in their methods. Copying the auto_ptr 
    passes ownership of memory and sets original auto_ptr to null. 

[7] Inserting into a deque invalidates all iterators/references unless inserted member 
    is at the front or back in which iterators are invalidated and references are not. 

[8] Erasing from a deque invalidates all iterators/references unless the erased member 
    is from the front or back in which only the erased member is invalidated.
    
[9] Queue and Stack are built on top of Deque
    Priority Queue is build on top of a combined Vector/Heap.
    Map is based on a balanced binary tree, Unordered Map is based on a hash table

[10] STL Containers/Strings lack a virtual destructor. You shouldn't inherit from them.

[11] std::remove doesn't actually remove any elements, only moves the wanted items
     to the front of the container and returns an iterator to the end of this range.
     Use the erase-remove idiom for vector/deque and member methods for list/maps.

[12] std::remove, std::remove_if, std::unique don't work with associative containers. 
     Use member methods or for loop to remove members.

[13] Data for strings not guaranteed to be stored in continuous memory
     Internal representation of string not guaranteed to end with null character
     Strings < 15 characters can use Short String Optimization and are stored on the stack

[14] Prefer != for iterators to < as < only works with random access iterators

[15] Prefer '\n' to std::endl as std::endl also flushes the stream buffer

[16] .size() returns size_type, not unsigned int. On 32-bit both unsigned and size_type
     are the same. On 64-bit, unsigned is 32-bit and size_type is 64-bit

[17] Map value_type is std::pair<const Key,T>. 
     If iterating without the const Key will create temporary copy of pair.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// C# CHEATSHEET
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[1] Classes cannot be more visible than their base classes- base interfaces can have
    any visibility. Interfaces cannot be more visible than their base interfaces.

[2] Calling a virtual/abstract function in constructor is undefined behaviour.
    Derived version will be called but dangerous.

[3] Always override ToString() as all user definded objects inherit System.Object

[4] Always initialise with the declaration unless the variable is to have the 
    default value that's auto-assigned

[5] Destructor is actually the Finaliser

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// C++/CLI CHEATSHEET
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[1] Don't change insides of pointer to System::string as it's interned- for each
    occurance of a particular string only occurs once in memory and can be 
    referenced by multiple variables. 

[2] Always create a finaliser/destructor pair if needing to release 
    managed/unmanaged resources.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// C#, C++, C++/CLI DIFFERENCES
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

===============================================================================================================
VARIABLE DIFFERENCES
===============================================================================================================

VALUE VARIABLE TYPES:
[C# ] Structs, enums, nullable/basic data types, reference object created on stack/register
[CLI] Any variable created on stack/register
[C++] Any variable created on stack/register

REFERENCE VARIABLE TYPES:
[C# ] Classes, arrays, boxed value-types created on heap
[CLI] Any variable created on heap
[C++] Any variable created on heap

CREATING REFERENCE TYPES:
[C# ] Uses new, garbage collected, can't be overloaded, array form, no placement form
[CLI] Uses gcnew, garbage collected, can't be overloaded, no array form, no placement form
[C++] Uses new, manual deletion, can be overloaded, array form, placement form

PARENT-CHILD SCOPE: int myInt = 2; { int myInt = 1; }
[C# ] If variable is in parent scope it cannot be redeclared in child scope
[CLI] As long as scope seperates variables, it can be redeclared
[C++] As long as scope seperates variables, it can be redeclared

STAND-ALONE/GLOBAL VARIABLES:
[C# ] Not allowed. Must have variables inside class/struct.
[CLI] Allowed
[C++] Allowed

FLOATING EXPRESSIONS: 2+4;
[C# ] Not allowed, must be assigned to something
[CLI] Allowed
[C++] Allowed

STRING CONCATONATION: string str = "one"+1;
[C# ] Will auto convert the number to a string during concatonation
[CLI] Depends on whether using std::string or System::string
[C++] Won't auto convert number to string

NAMESPACES:
[C# ] Cannot be anon, cannot contain variables/methods
[CLI] Can be anon, can contain variables/methods
[C++] Can be anon, can contain variables/methods

INCLUDING LIBRARIES:
[C# ] using MyLibrary
[CLI] using MyLibrary and #include MyLibrary.h
[C++] #include MyLibrary.h

#DEFINE:
[C# ] Must be before any code, cannot define variables/expressions, uses #if
[CLI] Can be anywhere, can define variables/expressions, uses #ifdef
[C++] Can be anywhere, can define variables/expressions, uses #ifdef

DOWNCASTING: int myInt = 1.0/2.0;
[C# ] No downcasting, Compile error, only implicitly converts if range can fit in new variable
[CLI] Downcasting okay, Compile warning, implicitly converts no matter what
[C++] Downcasting okay, Compile warning, implicitly converts no matter what

VALUE TO BOOL CONVERSION: if(myNumber){}
[C# ] Cannot accept a number into a bool; cannot use number as bool in if-statements
[CLI] Can accept a number into a bool; can use number as bool in if-statements
[C++] Can accept a number into a bool; can use number as bool in if-statements

SWITCH STATEMENTS:
[C# ] Can use strings in a switch statement, cannot fall through to next case
[CLI] Cannot use strings in a switch statement, can fall through to next case
[C++] Cannot use strings in a switch statement, can fall through to next case

PASSING BY-REF:
[C# ] Cannot return a reference, passes in reference with out/ref, tracks changes to objects address
[CLI] Can return a reference and passes in reference with %, tracks changes to objects address
[C++] Can return a reference and passes in reference with &, doesn't track changes objects address

SEQUENCE POINTS:
[C# ] Doesn't require sequence points
[CLI] Unknown
[C++] Requires sequence points between changing a variable and reading it

ORDER OF ARGUMENT EVALUATION
[C# ] Left to right always
[CLI] Unknown
[C++] Conditional operators left to right, everything else Compiler specific

===============================================================================================================
CLASS/STRUCT DIFFERENCES
===============================================================================================================

C# CLASS OBJECT CREATION:
1) Derived member Field Initialisaters
2) Base member Field Initialisaters
3) Base Constructor Body
4) Derived Constructor Body
5) Derived Dispose or Derived Finaliser
6) Base Dispose or Base Finaliser

C++ CLASS OBJECT CREATION:
1) Base Initialisation List
2) Base Constructor Body
3) Derived Initialisation List
4) Derived Constructor Body
5) Derived Destructor
6) Base Desctructor

C++/CLI CLASS OBJECT CREATION:
1) Derived Initialisation List
2) Base Initialisation List
3) Base Constructor Body
4) Derived Constructor Body
5) Derived Destructor or Derived Finaliser
6) Base Desctructor or Base Finaliser

STRUCT/CLASS TYPES:
[C# ] Structs value only, Class reference only
[CLI] Both allow value/reference types
[C++] Both allow value/reference types

PREVENTED MEMBERS:
[C# ] Value-types can't have user defined default constructor, destructor
[CLI] Value-types can't have user defined default constructor, destructor, copy constructor, operator=
[C++] Static constructor

IMPLICIT MEMBERS:
[C# ] Struct/Class: default/static constructor, finaliser, System.Object members, operator==(Class Only)
[CLI] Struct/Class: default/static constructor, finaliser, System.Object members, operator==(Class Only)
[C++] Struct/Class: default constructor, destrutor, copy/move constructor, operator=, operator&

DEFAULT VISIBILITY:
[C# ] Struct is public, Class is internal, All members private
[CLI] Struct members is public, Class members is private, Overall struct/class is internal
[C++] Struct/Struct members is public, Class/Class members is private

VARIABLE AUTO-INITIALISATION
[C# ] Class members, local variables at start of method and not within block scope call default()
[CLI] Value-type members, Local variables at start of method and not within block scope initialised to 0
[C++] Static variables auto-initialised to 0

STATIC CLASSES:
[C# ] Static keyword used (can't have abstract sealed together) only holds static members/methods
[CLI] Abstract sealed keywords used, only holds static members/methods
[C++] No keywords

INITIALISING STATIC MEMBERS:
[C# ] Initialised through Static constructor or when first used through field initialisation
[CLI] Initialised through Static constructor, no field/cpp initialisation
[C++] Initialised before main() called in cpp file

OBJECT DELETION
[C# ] Destructor inherited as Dispose() and explicitly called or Finaliser called by GC.
[CLI] Destructor called when object on stack out of scope/delete used or Finaliser called by GC.
[C++] Destructor called when object on stack out of scope/delete used. No Finaliser.

CLASS ;
[C# ] Doesn't require ; at end of closing bracket
[CLI] Requires ; at end of closing bracket
[C++] Requires ; at end of closing bracket

===============================================================================================================
INHERITANCE DIFFERENCES
===============================================================================================================

INHERITANCE
[C# ] Struct inherits interfaces, Class inherits one base/multiple interfaces, public inheritance
[CLI] Struct inherits interfaces, Class inherits one base/multiple interfaces, public inheritance
[C++] Struct inherits anything publically by default, Class inherits anything privately by default

INHERITANCE SUPPORT
[C# ] No MI (uses interfaces for MI), only public inheritance
[CLI] No MI (uses interfaces for MI), only public inheritance
[C++] Multiple Inheritance, private/protected inheritance support

SLICING:
[C# ] Slicing cannot occur as inheritance only occurs on reference types
[CLI] Slicing cannot occur as inheritance only occurs on reference types
[C++] Slicing can occur as inheritance occurs on reference and value types

INHERITED METHOD VISIBILITY:
[C# ] Virtual methods cannot be private, visibility must be the same between base/derived
[CLI] Virtual Methods can have any visibility, Private virtual must be sealed. Derived must have same or higher visibility than base.
[C++] Virtual Methods can have any visibility, base/derived visibility doesn't have to match

PURE VIRTUAL METHODS/CLASS:
[C# ] Abstract methods require keyword for class, abstract methods are automatically virtual
[CLI] Abstract methods require keyword for class, abstract methods require virtual keyword
[C++] Creating a pure virtual function with virtual and = 0 makes class auto-abstract

CALLING VIRTUAL METHOD IN CONSTRUCTOR:
[C# ] Dangerous to call virtual method in constructor; calls Derived version
[CLI] Dangerous to call virtual method in constructor; calls Derived version
[C++] Dangerous to call virtual method in constructor; calls Base version

DESTRUCTOR INHERITANCE
[C# ] Always virtual (from auto-inheriting System::Object)
[CLI] Always virtual (from auto-inheriting System::Object)
[C++] Only virtual if inheriting from base class with virtual destructor

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RENDERING TROUBLESHOOTING
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: Mesh has shape but doesn't rotate/translate/scale properly with camera
A: Check order of view, proj and world combination, check view and proj are accurate

Q: Mesh doesn't have shape
A: Check vertex input layout matches shader attribute inputs and are 
   used in shader as these can be optimized out on compilation

Q: Texture ordering is incorrect when accessed in shader
A: Check all textures are used in shader as they can be optimised out, check order of 
   declaration matches order of usage if not specifying buffer slot when sending texture

Q: Final image has banding
A: Check no loss of precision in shader (float converted to int), check render target
   texture has accuracy (32-bit instead of 8-bit) if fading between 2 close values

Q: Transparent mesh renders over other meshes (transparent and opaque) and hides them
A: Check transparent mesh renders last and in order of furthest to closest

Q: Transparent mesh part opaque part transparent is hiding some of the opaque triangles
A: Mesh needs to be seperated in opaque/transparent or writing to depth buffer needs to be
   disabled. If depth information is still needed a second pass just for this is required.

Q: Translucent meshes are flickering in front/behind each other at a distance
A: Try stable sorting the meshes so the same distances stay in same relative place in the container.