////////////////////////////////////////////////////////////////////////////////////////
//RENDERING
////////////////////////////////////////////////////////////////////////////////////////

RAYTRACING      [PRE-RENDER]        Casts rays from light to scene to view
RAYCASTING      [REALTIME-RENDER]   Casts rays from view to scene to light
RASTERIZATION   [REALTIME-RENDER]   Projects to plane using proj matrix

FORWARD RAY-TRACING [RAY TRACING]
• Rays traced from light into 3D scene
• Calculates new direction of rays when hitting surface
• Ideal for reflections/refractions
• Quality increases with more rays
• Disadvantage: hard to optimise, not possible in real time
• Disadvantage: lots of wasted rays that won't hit objects

BACKWARD RAY-TRACING [RAY CASTING]
• Rays traced from camera into 3D scene
• Does not compute new direction a ray takes after reflections/refractions
• Ray sent for each pixel; number of rays depends on screen resolution
• Every pixel will always be shaded; less rays/faster than raytracing

SCANLINE RENDERING [RASTERIZATION]
• Algorithm for determining which models are visible. 
• It goes row by row for pixels rather than look at each polygon.
• Polygons are sorted by their y coordinate and then intersected with a scanline
• Polygons obstructed by others are discards as the line advances down the image
• Only vertices needed for current scanline are worked on, speeding up process

PATH TRACING [RAY TRACING]
• Extends rays tracing where new rays are created/traced for object intersection points
• Takes into account indirect lighting/global illumination 

////////////////////////////////////////////////////////////////////////////////////////
RENDER PIPELINE
////////////////////////////////////////////////////////////////////////////////////////

TEXEL: One unit of a texture
PIXEL: One unit of the screen
FRAGMENT: Potential pixel. Each fragment has a pixel location, a depth value, color/texture values
HOMOGENEOUS CLIP SPACE: Screen space multiplied by 'w' component

01) FRUSTUM CULLING: Culls and creates list of meshes based on view frustum
02) INPUT ASSEMBLER: Reads index/vertex data of each mesh
03) VERTEX SHADER: Gets input vertex data, converts to homogenous clip space
04) HULL SHADER: Inputs patch primitives, writes patch control points
05) TESSELLATOR STAGE: Creates vertices and connectivity for tessellated lines or triangles.
06) DOMAIN SHADER: Takes shaded control points and outputs vertices
07) GEOMETRY SHADER: Inputs primitives optionally with adjacency information, then outputs different primitives
08) STREAM-OUT: Writes Geometry shader output to buffer in memory
09) BACKFACE CULLING: Face culling occurs depending on vert winding order
10) CLIPPING: Clips any vertices outside the visible screen (If x,y is in range [-w,w] and z is in range [0,w] then okay)
11) SCREEN MAPPING: Homogenous clip space transformed into screen space
12) RASTERIZATION: 2D shape fitted into pixels

    TRIANGLE TRAVERSAL:
     • If the center of pixel is enclosed in shape, pixel is fully filled. 
     • This creates a stepping, aliased effect. 
     • 2D object may visibly shift in position during this process

    FRAGMENT GENERATION:
    • Every pixel covered by shape is a Fragment. 
    • Fragment values are interpolated from the 2D triangles they're made up of

13) PIXEL SHADING: Gets interpolated vertex data as fragments, outputs pixel colors
14) OUTPUT MERGER: Gets shaded pixels from PS, does alpha blending and writes them back to the backbuffer.
15) TRANSPARENCY: If translucent objects, render after all opaque meshes in back to front order

==============================================================================
FORWARD SHADING
==============================================================================
• Easy to render transparency
• Expensive to do post effects
• Are limited in amount of lights

1) Render the scene with any lights that affect it to a single color buffer
2) Render the scene again outputting any information needed for post effects
3) Perform any post effects and present final image to the back buffer

==============================================================================
DEFERRED SHADING
==============================================================================
• Difficult to render transparecy
• Cheap to do post effects
• Can have many multiple lights

1) Render the scene once sending attributes to a G-buffer
   Attributes include: Normals, Depth, Diffuse, Specular, Ambient etc.
2) Render all lights as geometry with attenuation/intensity
   Point light: Sphere, Spot light: Cone, Directional light: Full screen quad
3) Combine the lighting texture with the G-buffer calculating the color 
   contribution of the light to the final pixel
4) Perform any post effects with the ability to use the G-buffer

////////////////////////////////////////////////////////////////////////////////////////
//GRAPHICS BUFFERS
////////////////////////////////////////////////////////////////////////////////////////

FORMAT: Describes the layout of the resource’s data in memory
PAGE FLIPPING: Double buffering to prevent tearing
FRAMEBUFFER/RASTER: Array of memory addresses representing pixels
DEFAULT BACK/FRONT BUFFERS: 32bit color buffer

DEPTH/Z BUFFER
• Saves projected depths of models from viewer (0.0->1.0)
• Needs to be same size or larger than connected color buffer
• Writing to can be turned on/off (ZWRITEENABLE) and affected by comparion function

DEPTH BUFFER COMPARISON FUNCTION
• Discards the incoming fragment if a depth comparison fails
• ZFunc = Never         Don't add to depth buffer
• ZFunc = LessEqual     Only add if depth value <= current value in buffer
• ZFunc = Less          Only add if depth value < current value in buffer
• ZFunc = GreaterEqual  Only add if depth value >= current value in buffer
• ZFunc = Greater       Only add if depth value > current value in buffer
• ZFunc = Always        Always add to depth buffer

DEPTH BUFFER ACCURACY
• Inaccuracy causes z-fighting where triangles have same value in buffer
• Accuracy dependent on:
    - Buffer storage size (32 or 16 bits)
    - Distance between near/far planes
    - Distance between near/origin
• Near getting closer to origin gives less accuracy to values close to far plane
• Near-far distance increasing gives less accuracy to values close to far plane
• Objects together close to far plane z values may be rounded as same value since more 
  of buffer is used for objects closer to near due to non-linear scaling into the buffer
    
STENCIL BUFFER
• masks areas during rendering; specifies what's hidden/shown
• Holds on/off flag

ATTRIBUTE BUFFER
• Buffer of integers
• Used to specify which triangles belong to each subset of a mesh with 
  multiple parts (01120 means triangle 1 belongs to subset 0, triangle 
  2 belongs to subset 1 etc.)

RENDER TARGETS
• Comprised of a color buffer and a depth/stencil buffer 

///////////////////////////////////////////////////////////////////////////////////////////////////
//TRANSPARENCY
///////////////////////////////////////////////////////////////////////////////////////////////////

• Render non-transparent objects first in any order
• Render transparent objects back to front according to depth
• Alpha blending: blends alpha pixel into buffer using a set formula
• Alpha testing: tests whether alpha pixel contributes to the colour buffer

-----------------------------------------------------------------
RESULT rgb = (SRCBLEND * SRCrgb) [BLENDOP] (DESTBLEND * DESTrgb)
-----------------------------------------------------------------
DESTrgb = pixel colour currently in buffer from previous rendering
SRCrgb = pixel colour being generated by shader

DEFAULT ALPHA BLENDING
AlphaBlendEnable = true
SrcBlend = SrcAlpha
DestBlend = InvSrcAlpha
BlendOp = Add

DEFAULT ALPHA TESTING
AlphaTestEnable = true;
AlphaFunc = GreaterEqual; (only accept if alpha >= 128)
AlphaRef = 128; 

BLENDOP
Add:          (SRCBLEND * SRCrgb) + (DESTBLEND * DESTrgb)
Subtract:     (SRCBLEND * SRCrgb) - (DESTBLEND * DESTrgb)
RevSubtract:  (DESTBLEND * DESTrgb) - (SRCBLEND * SRCrgb)
Min:          min(SRCBLEND * SRCrgb, DESTBLEND * DESTrgb)
Max:          max(SRCBLEND * SRCrgb, DESTBLEND * DESTrgb)

ALPHAFUNC
Never:        Don't accept pixel into buffer
LessEqual:    Only accept pixel into buffer if <= AlphaRef
Less:         Only accept pixel into buffer if < AlphaRef
GreaterEqual: Only accept pixel into buffer if >= AlphaRef
Greater:      Only accept pixel into buffer if > AlphaRef
Always:       Always add to pixel buffer

SRCBLEND / DSTBLEND
Zero           (0, 0, 0, 0)
One            (1, 1, 1, 1)
SrcColor       (Rˢ, Gˢ, Bˢ, Aˢ)
InvSrcColor    (1-Rˢ, 1-Gˢ, 1-Bˢ, 1-Aˢ)
SrcAlpha       (Aˢ, Aˢ, Aˢ, Aˢ)
InvSrcAlpha    (1-Aˢ, 1-Aˢ, 1-Aˢ, 1-Aˢ)
DestAlpha      (Aᵈ, Aᵈ, Aᵈ, Aᵈ)
InvDestAlpha   (1-Aᵈ, 1-Aᵈ, 1-Aᵈ, 1-Aᵈ)
DestColor      (Rᵈ, Gᵈ, Bᵈ, Aᵈ)
InvDestColor   (1-Rᵈ, 1-Gᵈ, 1-Bᵈ, 1-Aᵈ)
SrcAlphaSat    (f, f, f, 1) where f = min(Aˢ,1-Aᵈ)

////////////////////////////////////////////////////////////////////////////////////////
//STENCILING
////////////////////////////////////////////////////////////////////////////////////////

if(ref & mask [operator] value & mask == true) { accept pixel }

NEVER:           Stencil test always fails
ALWAYS:          Stencil test always succeeds
LESS:            <
EQUAL:           ==
LESSEQUAL:       <=
GREATER:         >
NOTEQUAL:        !=
GREATEREQUAL:    >=                     

KEEP: Keep value currently in stencil buffer
ZERO: Specifies to set the stencil buffer entry to zero.
REPLACE: Replace the buffer entry with stencil-reference value
INCRSAT: Increment the stencil buffer entry, clamps to max
DECRSAT: Decrement the stencil buffer entry, clamps to 0
INVERT: Invert the bits of the buffer entry
INCR: Increment the buffer entry, wraps to 0 if goes over max 
DECR: Decrement the buffer entry, wraps to max if goes under 0

////////////////////////////////////////////////////////////////////////////////////////
//TRANSFORMATIONS
////////////////////////////////////////////////////////////////////////////////////////

----------------
|  YAW:    Y   |
|  PITCH:  X   |
|  ROLL:   Z   |
----------------

EULER ANGLES
• Set of pitch, roll, yaw combined to form a matrix
• Suffer from gimbal lock
• Less storage space needed (3 values)

MATRICES: 
• Suffer from gimbal lock if used with Euler Angles
• More storage space needed (12 values)
• Slow, rounding errors

QUATERNIONS: 
• No Gimbal lock
• Less storage space needed (4 values)
• Fast, less rounding errors

GIMBAL LOCK
• A set of three gimbals mounted together to allow three degrees of freedom
• If the middle gimbal is rotated greater than 90, the top and bottle gimbals 
  are aligned and in gimbal lock losing a degree of freedom. 

VIEW MATRIX
• Inverse of the Camera World Matrix
• changes the world scene basis so the camera is at the origin

////////////////////////////////////////////////////////////////////////////////////////
//PROJECTION
////////////////////////////////////////////////////////////////////////////////////////

VIEW FRUSTUM:
Pyramid volume from camera to world, has near and front clipping planes

ORTHOGONAL PROJECTION MATRIX:
objects remain same size regardless of depth

PERSPECTIVE PROJECTION MATRIX:
objects different sizes according to depth, uses horizon as vanishing point 

D3DXMatrixPerspectiveFovLH(&projectionMatrix,
                           D3DX_PI/2,    //field of view (α)
                           Width/height  //aspect ratio (R)
                           10.0f,        //z-value of the near view-plane (n)
                           1000.0f);     //z-value of the far view-plane (f)

PROJECTING VERTS INTO SCREEN SPACE:
For view space coordinates x,y positions need to be between [-1,1]
For view space coordinate z, depth needs to be between [0,-1]

tan(b/2) = R*tan(α/2)
tan(b/2)*n = W/2
tan(α/2)*n = H/2

 A = 1/(R*tan(α/2))
 B = 1/(R*tan(b/2))
 C = f/(f-n)
 D = -fn/(f-n)

         | A 0 0 0 |
[x y z 1]| 0 B 0 0 | = [Ax By (Cz+D)  z]
         | 0 0 C 1 |   HOMOGENEOUS CLIP SPACE
         | 0 0 D 0 |
         PROJ MATRIX

In homogeneous clip space: culling/clipping
If x,y is in range [-w,w] and z is in range [0,w] then okay
To get final coordinate, divide by w (which is screen space z)

[x' y' z' 1] = [Ax/z  By/z  C+(D/z)  1]
 --------------------------------------
| x' = x/(zRtan(α/2))        = Ax/z    |
| y' = y/(ztan(α/2))         = By/z    |
| z' = (f/f-n)-(fn/(z(f-n))) = C+(D/z) |
 --------------------------------------

////////////////////////////////////////////////////////////////////////////////////////
//OPTIMISATION
////////////////////////////////////////////////////////////////////////////////////////

FARPLANE CULLING
• Any objects past the farplane are culled
• Limitation is if plane is too close objects seen disappearing
• This can be fixed by using fog to hide far distances

FRUSTUM CULLING
• Only objects in frustum are drawn. 
• If Polygon outside it's not visible and hence discarded
• If partially inside its clipped so outside parts are removed

FRONT/BACKFACE CULLING
• Winding order of vertices indicates which way polygon is facing

CLIPPING
• Any screen space coordinates outside [–1,–1,0] to [1,1,1] culled

OCCLUSION CULLING
• Identifies parts of the scene visible/not visible to the viewer
• Objects behind other objects are discarded
• Can use a plane to represent occluder *similar to frustum culling)
• Can use Potential Visible Sets for indoor scenes

OPTIMIZATION TIPS
• Don't allocate stencil if you don’t use it
• R5G6B5 color sufficient for dynamic reflection maps
• Use low resolution (<256x256) 8-bit normalization cube-maps
• Use half instead of float where strict precision isn't important
• Render a depth-only pass before color pass to reduce pixel shader use

////////////////////////////////////////////////////////////////////////////////////////
//TERRAIN GENERATION
////////////////////////////////////////////////////////////////////////////////////////

MIDPOINT DISPLACEMENT ALGORITHM
• Start with basic four vertex shape and slip by adding vertex in middle
• Get x/z values of middle vertex from midpoint of surrounding vertices
• Get y value of middle vertex from a value between -d/2 and d/2
• Continue to split new four faces multiplying d by 2^-r each time
• Filter to remove sharp transitions
• Smaller R = rougher terrain

FAULT FORMATION ALGORITHM
• Starts with grid for terrain and creates random line accross the terrain
• Raise vertices on one side of the line and lower on other by amount d
• Create another line and repeat, reducing d each pass
• More passes = rougher terrain

////////////////////////////////////////////////////////////////////////////////////////
//PRIMITIVES
////////////////////////////////////////////////////////////////////////////////////////

POINT LISTS:  .    .    . .   .
LINE LIST: ._________________. 
LINE STRIP: ._______._______.___._______._____.

TRIANGLE LISTS:
     __
    |\ | Triangle1 {1,2,3} Limitation is no sharing of vertices
    |_\| Triangle2 {3,4,1} which increases vertex count

TRIANGLE STRIPS: 
     ___
    |\ |\  Specify first four points then one
    |_\|_\ point for every new triangle in strip

TRIANGLE FANS:
     ____
    |\  /| All triangles connect
    | \/ | to a common point
    | /\ |
    |/__\|

CONVEX POLYGONS: line between two points in polygon never crosses border 
CONCAVE POLYGONS: line between two points in polygon can cross border
POLYHEDRA: three dimensional object with flat faces and straight edges
POLYTOPES: convex hulls of finite points sets (line segments, triangles, polyhedra)
QUADRICS: spheres, cones, cylinders