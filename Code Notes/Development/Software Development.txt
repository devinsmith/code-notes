////////////////////////////////////////////////////////////////////////////////////////////////
//SOFTWARE DEVELOPMENT
////////////////////////////////////////////////////////////////////////////////////////////////

AGILE
• Uses self-organizing teams
• Uses time-boxed iterative approach
• Encourages rapid and flexible response to change
• Each iteration involves one team working on planning, design, coding and testing
• At end of each iteration product is demonstrated to stakeholders
• Goal is to have an available release at the end of each iteration
• Have a daily standup or daily scrum meeting 

SCRUM
• Product Owner: represents the stakeholders; ensures team delivers value to business
• Product Owner writes user stories, prioritizes and adds them to the backlog
• ScrumMaster: acts as buffer between team and any problems, not the team leader
• Stakeholders: customers of the product
• Scrum of scrums: team representitives have a 'standup' meeting
• Retrospective to reflect on how the iteration went

////////////////////////////////////////////////////////////////////////////////////////////////
//WINDOWS DEVELOPMENT
////////////////////////////////////////////////////////////////////////////////////////////////

4 APPLICATION TYPES:
• Console applications
• Windows applications
    - Windows Forms
    - Win32 Applications
    - WPF Applications
• ASP.NET applications
• Web Services

FUSLOGVW.EXE:
Displays details for failed assembly binds. Allows diagnosing why .NET framework
cannot locate an assembly at runtime (TypeLoadException)

DEPENDS.EXE:
Dependency walker for 32/64 bit modules (dll,exe) and builds heirarchical tree
diagrams of all dependent modules, shows exported functions

////////////////////////////////////////////////////////////////////////////////////////////////
//MAC DEVELOPMENT
////////////////////////////////////////////////////////////////////////////////////////////////

• Code in C++/Objective-C
• Use Xcode for IDE and Cocoa for framework
• Graphics API is OpenGL

TERMINAL COMMANDS:
pwd                  // gives name of folder currently in
ls                   // dir
open .               // start.
cd folder            // cd folder
cd ..                // cd ..
./myfile.sh          // myfile.bat

////////////////////////////////////////////////////////////////////////////////////////////////
//GIT SOURCE CONTROL
////////////////////////////////////////////////////////////////////////////////////////////////

=============================================================================================
INITIALISING GIT
=============================================================================================

git config --global user.name "Kara Jensen"
git config --global user.email mail@karajensen.com

[merge]
	tool = kdiff3
[mergetool "kdiff3"]
	cmd = \"C:\\\\Program Files (x86)\\\\KDiff3\\\\kdiff3\" $BASE $LOCAL $REMOTE -o $MERGED

=============================================================================================
GIT COMMANDS
=============================================================================================

• If uncommited changes are on a branch, new branches checked out will take those changes

git remote add master https://github.com/name/repo.git  // Create remote repository
git clone https://github.com/name/repo.git  folderName  // Clone repository

git fetch                                   // Gets updates from server
git branch                                  // List all branches
git checkout -b myBranch origin/myParent    // Create new branch from remote branch
git push -u origin myBranch                 // Create remote branch from local branch
git checkout myBranch                       // Checkout a branch
git checkout commitID                       // Checkout a branch at a commit ID
git status                                  // Show changed files in branch
git add -A                                  // Add changes to next commit
git commit -am "Description"                // Commit changes
git reset --hard                            // Discard all uncommitted changes
git clean -f                                // Delete uncommitted files
git clean -fd                               // Delete uncommitted directories
git clean -f -n                             // View all files which will be deleted
git clean -fd -n                            // View all directories which will be deleted
git reset --hard commitID                   // Revert back to commit
git checkout filename.ext                   // Revert changes to file
git log                                     // List commits and commitIDs
git --no-pager log > log.txt                // Save list of commits and commitIDs to a file
git push                                    // Push local changes to remote branch
git push origin master                      // Push local changes to master branch
git pull origin ParentBranch                // Merge remote branch into current branch
git mergetool                               // Fix merge conflicts
git branch -D myBranch                      // Delete local branch
git push origin --delete myBranch           // Delete remote branch
git remote show origin                      // Show remote branch of local
git branch -m oldBranch newBranch           // Rename a local branch

=============================================================================================
GIT IGNORE
=============================================================================================

# ignore all .a files
*.a
# still track lib.a, even though you're ignoring .a files above
!lib.a
# ignore all files in the build/ directory
build/
# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

////////////////////////////////////////////////////////////////////////////////////////////////
//PERFORCE SOURCE CONTROL
////////////////////////////////////////////////////////////////////////////////////////////////






////////////////////////////////////////////////////////////////////////////////////////////////
//VISUAL STUDIO
////////////////////////////////////////////////////////////////////////////////////////////////

ENVIRONMENT VARIABLES:
$(SolutionDir)\
$(ProjectName)
$(Configuration)

COMPILIER OPTIONS:
/GS              Prevent returning after a function has trashed the stack                        
/NXCOMPAT        Makes the data in the heap/stack non-executable
/DYNAMICBASE     Extra security with no run time cost
/ZI              Program Database for Edit And Continue, disables /Zo
/Zi              Program Data, enables /Zo for VS2015
/Zo              Generate enhanced debug information for release builds (PBDs get larger)

////////////////////////////////////////////////////////////////////////////////////////////////
//MSBUILD
////////////////////////////////////////////////////////////////////////////////////////////////

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">

<!-- PROPERTY GROUPS -->
<!-- Can exist inside/outside targets -->
<!-- Usage: $(MyProperty)
<PropertyGroup>
  <MyProperty>MyPropertyValue</MyProperty>
</PropertyGroup>

<!-- ITEM GROUPS -->
<!-- Can have multiple identities -->
<!-- Access through %(SampleItem.Identity) and %(SampleItem.Id)
<ItemGroup>
  <SampleItem Include="one">
    <Id>1a</Id>
  </SampleItem>
  <SampleItem Include="one">
    <Id>1b</Id>
  </SampleItem>
  <SampleItem Include="two">
    <Id>2</Id>
  </SampleItem>
</ItemGroup>

<!-- TARGET -->
<!-- Will execute DependsOnTargets -->
<Target Name="Deploy" DependsOnTargets="BatchExample;Build">
</Target>
<Target Name="Build">
</Target>

<!-- TARGET: BATCH GROUP -->
<!-- Will loop through each item in ItemGroup SampleItem -->
<Target Name="BatchExample">
  <Message Text="SampleItem.Identity: %(SampleItem.Identity)"/>
  <Message Text="SampleItem.Identity: %(SampleItem.Id)"/>
</Target>

<!-- TARGET: CALL EXE -->
<!-- Will only call exe if output/input are different ->
<Target Name="CallExe" Inputs="$(MYDIRECTORY)\MyFile.txt" Outputs="$(MYDIRECTORY)\MyFile.txt">
  <Exec Command="$(MYDIRECTORY)\MyExe.exe" WorkingDirectory="$(MYDIRECTORY)" />
</Target>

<!-- TARGET: REMOVE DIRECTORY -->
<Target Name="RemoveDir">
  <ItemGroup>
    <DirectoriesToRemove Include="$(MYDIRECTORY);$(MYDIRECTORY2)" Condition="$(ShouldRemove) == 'True'"/>
  </ItemGroup>
  <RemoveDir Directories="@(DirectoriesToRemove)" />
</Target>

<!-- TARGET: RECURSIVE COPY -->
<!-- For each item in the group copy input to output -->
<Target Name="RecursiveCopy" Outputs="%(MyGroup.Identity);%(MyGroup.Id)">
  <PropertyGroup>
    <Identity>%(MyGroup.Identity)</Identity>
    <Id>%(MyGroup.Id)</Id>
    <InputDir>$(MYDIRECTORY)\$(Identity)\$(Id)</InputDir>
    <OutputDir>$(MYDIRECTORY)</OutputDir>
  </PropertyGroup>
  <ItemGroup>
    <FilesToCopy Include="$(InputDir)\**" />
  </ItemGroup>
  <Error Condition="!Exists('$(InputDir)')"  Text="Directory '$(InputDir)' does not exist" />
  <Error Condition="!Exists('$(OutputDir)')" Text="Directory '$(OutputDir)' does not exist" />
  <Copy SourceFiles="@(FilesToCopy)"
        DestinationFolder="$(OutputDir)\%(RecursiveDir)"
        SkipUnchangedFiles="true" />
</Target>

<!-- TARGET: BATCH MULTIPLE GROUPS -->
<!-- Using multiple batches requires merging groups -->
<Target Name="BatchingMultiGroup">
  <ItemGroup>
    <Combined Include="@(MyGroupOne)">
      <GroupTwo>%(MyGroupTwo.Identity)</GroupTwo>
      <GroupTwoId>%(MyGroupTwo.Id)</GroupTwoId>
    </Combined>
  </ItemGroup>
  <Message Text="%(Combined.Identity) %(Combined.Id) %(Combined.GroupTwo) %(Combined.GroupTwoId) " />
</Target>
  
</Project>