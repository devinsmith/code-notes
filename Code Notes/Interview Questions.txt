/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//INTERVIEW TOPICS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

PROGRAMMING:
• How primitive types/strings are represented in memory
• Bit manipulation
• Pimpl, Singleton and Factory design patterns
• Stack vs Heap

ALGORITHMS/STRUCTURES:
• Algorithm Complexity (Big-O)
• Merge Sort, Quick Sort, Binary Search
• Hash Table implementation
• Linked list traversal and manipulation
• Famous NP-complete problems: Traveling Salesman, Knapsack problem

TREES:
• Construction, implementation, traversal, manipulation algorithms
• Binary Trees, n-ary Trees, Tries, Red/Black Trees, Splay Trees
• Difference between inorder, postorder, preorder

GRAPHS:
• 3 ways to represent in memory and pros and cons: objects/pointers, matrix, adjacency list
• Breadth-First-Search and Depth-First-Search implementation and pros/cons

CONCURRENCY:
• Locks, mutexes, semaphores, monitors and how they work
• Know about deadlock and livelock and how to avoid them

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//PROGRAMMING QUESTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: Name a data structure that can replicate a cache and why
A: Splay trees as they are designed to provide a faster access to the same piece of data for the second time

Q: What is a monolithic class and why is it bad?
A: A class that tries to do too much- classes should have one responsibility
   Discourages inheritance and extending the class and makes it complex to test and maintain

Q: Why is the worldview inverse transpose matrix used to transform normals?
A: If a non-uniform scale or shear is used on the model the normals 
   will be incorrect if just using the worldview matrix

Q: What is recursion, and what would normally happen if recursion went too deep?
A: Calling the function within the function. Will cause stack overflow if going too deep.

Q: What is an orthogonal matrix?
A: Matrix where rows/columns are unit length, determinant is 1 and the transpose equals the inverse

Q: Describe the difference between a breadth-first search and depth-first search?
A: - BFS searches each row from left to right moving down to the children once the row has finished
   - DFS searches down the parent-child heirarchy first and works its way back up
   - BFS uses more memory than DFS as it has to keep track of children nodes
   - BFS is less likely than DFS to get stuck in an infinite loop

Q: Describe how you could use a single array to implement three stacks
A: Approach 1: Divide the array into 3 equal sections and have a max allowed size for the stack
   Approach 2: Each stack node keeps track of the one below it. 
               Need to also keep track of which array indexes have a node and which are free.

Q: How would you design a stack which has push, pop and min value methods all with O(1) time?
A: Pop and push are already O(1) with a stack. For minimum, each node in the stack keeps track of 
   the minimum beneath itself. To get the overall minimum, get the minimum stored on the stack top

Q: Why are textures power of 2?
A: The graphics pipeline can take advantage of optimizations related to efficiencies in 
   working with powers of two: dividing, multiplying, generation and usage of mipmaps

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//C++ QUESTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: What is the difference between a pointer and a reference?
A:  - pointers hold a memory address for the variable, references are another name for the variable
    - pointers must be dereferenced to use the variable
    - pointers can change what they point to, references cannot
    - pointers can be null, references cannot

Q: What are some circumstances where using a pointer is preferable to using a reference?
A: When the variable may be null or not exist or when you require pointer arithmatic

Q: What obstacles preventing use of const correct interfaces in new classes that are being written? 
A: If the class wraps or uses a class that does not use it

Q: What is the difference between const char* and char *const?
A: const char* is a pointer to a const char variable while char *const is a constant pointer to a char variable

Q: What is function overloading?
A: When multiple functions have the same name but differ by number/type of arguments and 
   for pointer/reference arguments only whether const or non-const

Q: What is a function pointer, and can you name a use?
A: A pointer that holds the address of a function. Used for callbacks and passing with events.

Q: What kind of values can be used as a default value?
A: Constant, ternary expressions, global and static variables, static and non-member functions

Q: What the two operators used for de-referencing pointers to member functions? 
A: ->* and .*

Q: How do you take the address of an overloaded function?
A: You need to cast it to the overload you require: (void(MyClass::*)(double))&MyClass::MyMethod

Q: Is there a way to inline a function without using the inline keyword?
A: The compiler will ultimately determine what is inlined or not. By giving the function 
   declaration a body in the header file this suggests inlining without the inline keyword.

Q: Describe any circumstances where the inline keyword would not inline a function.
A: If the compiler decides the function is not optimized by doing so

Q: What are the five operators that cannot be overloaded.
A: .       The membership operator
   .*      The pointer-to-member operator
   ::      The scope-resolution operator
   ?:      The conditional operator
   sizeof  The sizeof operator

Q: How are prefix and postfix versions of operator++() differentiated?
A: Prefix returns a reference to the object after incrementing
   Postfix returns a copy to the object before incrementing

Q: What is a conversion or cast operator, and provide an example where one might be useful?
A: Allows casting the class object to a different variable type, useful for casting between user-defined types

Q: Name a circumstance where the compiler will invisibly generate a temporary due to operator overloading.
A: If there is no direct match for the given argument and a match where the compiler can implicitly cast.

Q: What common mistake when using static members will cause a linker error?
A: Not initialising them in the cpp file

Q: What is the purpose of the extern keyword?
A: For global variables it allows external access accross multiple files

Q: When are static local variables in functions constructed?
A: On startup, initialised to 0 and then re-initialised to the given value when the function is first called

Q: When are global objects and static member objects constructed and destructed?
A: On startup, they are initialised to 0 or the value given to them for inialisation. 
   They are destructed when the program exits.

Q: What determines the construction order for global objects and static members, and why could it be a problem?
A: Global and static members are initialised before the application but there is no guarantee of initialisation order.
   This can be a problem is some global or static members rely on others for initialisation.

Q: When should you use multiple inheritance?
A: When a class needs functionality from multiple classes

Q: What is virtual inheritance and when should it be used?
A: Used when the inheritance pattern is diamond shaped and allows inherited classes that 
   have the same base class to share that class.

Q: What is the difference between public, protected and private inheritance?
A: Public: base public can be accessed by everything, base protected can be accessed by derived class hierarchy
   Protected: base public/protected can only be accessed by derived class hierarchy
   Private: base public/protected can only be accessed by first derived class

Q: Why does changing the private members of a class cause recompilation of anything using the class?
A: Private data members can change the size of the object and participate in function overload resolution

Q: What is the difference between a structure and class?
A: Structure members/inheritance public by default, class members/inheritance private by default

Q: When is using friend functions a good idea?
A: For obtaining the opposite operator overloading calling order ie. x * obj

Q: When is using friend classes a good idea?
A: When there is tight coupling and a close relationship between the two classes ie. Visitor pattern

Q: How can the using keyword be used in a class?
A: To define a namespace within the class or prevent data hiding of base class members

Q: Is it ever a good idea to use "delete this" in a member function?
A: No as it calls the destructor. Any code in the function after the call may cause an exception.

Q: What is a destructor, and what are two ways it is called?
A: Explicitly through ~MyClass() or delete this or implicitly when the object goes out of scope

Q: What is a default constructor and when does the compiler automatically generate one? 
A: An implicitly created function that initialises the class. It is created when
     - A constructor is not explicitly defined
     - There are no members that cannot be assigned automatically (const, references)
     - The default signature is not defined with = delete

Q: What is the difference between a copy constructor and a copy assignment operator?
A: A copy constructor is used to initialised a new object with the values of a given object
   A copy assignment operator is used to equalise the object with the already constructed given object

Q: When do you need to provide a copy constructor and assignment operator?
A: When there are members that cannot be automatically copied (reference variables)
   When deep copying is required

Q: What is a conversion constructor, and when does the compiler automatically call one? 
A: A constructor with a single argument without the explicit keyword. 
   It is automatically called when the argument type is assigned to the object.

Q: Name two situations where you must use an initialisation list as opposed to assignment in constructors. 
A: For const and reference members

Q: Can the 'this' pointer be used inside a constructor?
A: Yes however it is dangerous to do so for virtual methods

Q: Will the compiler execute items in the initialiser list in the order that they appear in the list?
A: No. They will execute in the order they appear in the class

Q: What is the purpose of the explicit keyword?
A: For single argument constructors to prevent implicit casts from the argument type to the class type

Q: Why might a class have a private destructor?
A: If the class wishes to manage destruction itself ie. for reference counted objects

Q: How is a virtual function different to a normal function?    
A: It can be redefined in a derived class to provide a different implementation
   At runtime, depending on the calling object the correct implementation is chosen

Q: How do you define an abstract base class, and what is its purpose?
A: It prevents any instances of the class from being constructed. Defined by =0 after any method.

Q: When is a virtual destructor necessary?
A: When the class expects to be inherited from. If not made virtual, any deletion of the derived object 
   from its base class pointer will result in only the base destructor being called.

Q: What is a v-table and how is it represented?
A: Vtbl is array of function addresses for a class that has virtual functions in the static data segment
   Usually stored as a static array generated at compile-time though exact implementation compiler specific

Q: What are the hidden data members of a class and when are they created?
   vtble pointer: when a class has virtual functions 
   virtual base: when virtual multiple inheritance with a shared base class is used

Q: What implications does the v-table have for usage of byte manipulating functions such as memset?
A: memset only works on POD types as it overwrites the give bytes with a value. This is bad for using it to 
   initialise anything non-POD as it can overwrite the hidden pointer to the vtble and pointers to virtual bases.

Q: Are virtual functions slow? Explain.
A: They are slower than a normal function call. The compiler does not know at compile-time which function will
   be called. Extra calls to the vtbl to find the correct address as well as not being able to use the normal 
   function optimizations such as inlining contributes to this speed.

Q: What are the typical performance bottlenecks in a C++ application?
A: Dynamic allocation, algorithm processing many inputs, inserting/deleting in containers

Q: Why should you always catch a const reference?
A: Const is used to prevent the exception from being modified and giving incorrect crash information
   Reference is used so the exception can be resolved polymorphically and so slicing does not happen
   Reference is used instead of pointer to reduce the need to manage any memory at the catch position
   Allocating memory for an exception through a pointer may not work if the exception is out of memory.

Q: What are the 3 types of Generic Type Deduction?
A: Template type deduction ignores reference/pointer-ness; keeps const except for by-val passing.
   Auto type deduction is same as template but assumes {} is std::initializer_list.
   Decl type deduction does not ignore reference/poiner-ness; keeps const.

Q: What is the difference between scoped and unscoped enums?
A: Unscoped enums have compiler dependent underlying type, pollute namespace and auto convert to int
   Scoped enums have int underlying type, don't pollute namespace and require cast to int
   Scoped enums may also define custom methods

Q: What is the difference between const/non-const global variables defined in a header file?
A: They are static by default if const and extern by default if non-const

Q: What is the difference between static and extern variables defined in a header file?
A: Variables defined in .h with extern keyword reference global variable initialised 
   in .cpp and cannot be initialised in .h or will throw linker error.
   Variables defined in .h with static keyword are private and a copy of it is created 
   for every use of the header. This increases memory usage during compilation.

Q: Why is =delete preferred over ommitting a definition for undesired methods?
A: It gives a compile time error rather than a linker error

Q: What kinds of types cannot by used as members of unions?
A: Objects with non-trivial constructors, destructor, assignment op, inheritance and virtual functions.

Q: Which C++ cast has no C-style equivalent?
A: dynamic_cast

Q: When does an objects lifetime begin/end?
A: On full completion of constructor it begins, on start of destructor it ends

Q: What happens when a constructor emits an exception?
A: Construction has failed and the object never existed. The destructor does not need to be called.

Q: Why should destructors never throw?
A: If the stack is unwinding because of an exception and a destructor throws there are 2 exceptions occuring
   This is undefined behaviour and the program terminates

Q: Why is it dangerous to store the this pointer in a shared_ptr
A: Users of the object may also store it in a shared_ptr which means the memory is owned by two smart pointers
   If one smart pointer deletes it, the other does not know about it

Q: Can any arbitrary class be made exception safe without modifying its structure?
A: No, exception safety affects the class design

Q: What is design pattern that works on any class in order to give a near strong exception guarantee?
A: Pimpl idiom allows a second object of the class to be constructed easily and then no-throw swap 
   called on if no exceptions are thrown. It is only a near guarantee as constructing a new member 
   of the class may affect static or global variables.

Q: What is multiple inheritance and what complication does it bring?
A: The ability to inherit from more than one base class that isn't an interface.
   Using it the class may end up with more than one of the same base class (ie. diamond shaped)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//STL QUESTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: What is the underlying type of std::map?
A: Balanced binary tree

Q: What is the difference between myVector[0] and myVector.at(0)?
A: at() does bounds checking and operator[] does not

Q: What is the difference between myMap[0] and myMap.at(0)?
A: at() checks if key exists and throws if not while operator[] will add the key through 
   the default constructor if the item doesn't exist

Q: What is the additional cost, if any, with passing functors to the standard algorithms?
A: Functors are passed by-val for each element iterated over. If the functor is not POD then it could be costly.
   In-built functors however are faster than passing lambdas/function pointers due to them being inlined

Q: Are the standard library containers exception safe and exception neutral?
A: Yes. It has at least a basic guarantee where objects will be still usable but not in a predictable state
   Many sections such as the containers generally have a strong guarantee.

Q: What are some of the performance issues with STL containers?
A: Possible cache misses when searching/iterating. Some containers are not in continous memory 
   Bigger the data size the more cache misses as elements don't fit in cache lines

Q: What is the Short String Optimization?
A: If the string capacity is <= 15 characters it is stored on the stack

Q: Why are the associative container keys const?
A: Sort order is determined by the key when a new member is inserted
   If the keys are changed the order will be corrupted

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//PERSONAL QUESTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

ANSWER STRUCTURE: Situation, Action, Response

01) What do you know about the company or position?
02) Have you ever dealt with company policy you weren't in agreement with?
03) Why did you leave your last job?
04) What is the most difficult thing about working with you?
05) Time when you had to make an important decision?
06) Tell me about your strengths?
07) What is your greatest failure and what did you learn from it?
08) Give examples of ideas you've had or implemented.
09) How did you handle meeting a tight deadline?
10) Why do you want this job?
11) What five words would describe you?
12) Do you prefer to work in a small, medium or large company?
13) What are your goals for five years from now?
14) Share an example of how you were able to motivate employees or co-workers.
15) Tell me about your work experience and how it has prepared you for a career at this company
16) How do you handle stress and pressure?
17) Give an example of an important goal that you set in the past.
18) What do you like and dislike about job we are discussing?
19) How important is it for you to have a career at this company?
20) What do you think you can bring to this position?
21) How do you reach a decision if you don't have all the facts?
22) What do you like and dislike about job we are discussing?
23) Tell me about a time when you had to do something you really didn't like doing
24) What are some technical books you have recently read?
25) Do you have any further questions?