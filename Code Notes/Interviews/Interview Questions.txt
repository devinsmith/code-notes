/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//INTERVIEW QUESTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: Name a data structure that can replicate a cache and why
A: Splay trees as they are designed to provide a faster access to the same piece of data for the second time

Q: Why is the worldview inverse transpose matrix used to transform normals?
A: If a non-uniform scale or shear is used on the model the normals 
   will be incorrect if just using the worldview matrix

Q: What is recursion, and what would normally happen if recursion went too deep?
A: Calling the function within the function. Will cause stack overflow if going too deep.

Q: What is an orthogonal matrix?
A: Matrix where rows/columns are unit length, determinant is 1 and the transpose equals the inverse

Q: Describe the difference between a breadth-first search and depth-first search?
A: - BFS searches each row from left to right moving down to the children once the row has finished
   - DFS searches down the parent-child heirarchy first and works its way back up
   - BFS uses more memory than DFS as it has to keep track of children nodes
   - BFS is less likely than DFS to get stuck in an infinite loop

Q: Describe how you could use a single array to implement three stacks
A: Approach 1: Divide the array into 3 equal sections and have a max allowed size for the stack
   Approach 2: Each stack node keeps track of the one below it. 
               Need to also keep track of which array indexes have a node and which are free.

Q: How would you design a stack which has push, pop and min value methods all with O(1) time?
A: Pop and push are already O(1) with a stack. For minimum, each node in the stack keeps track of 
   the minimum beneath itself. To get the overall minimum, get the minimum stored on the stack top

Q: Why are textures power of 2?
A: The graphics pipeline can take advantage of optimizations related to efficiencies in 
   working with powers of two: dividing, multiplying, generation and usage of mipmaps
   Can also reduce fragmentation of memory

Q: What is the difference between a pointer and a reference?
A:  - pointers hold a memory address for the variable, references are another name for the variable
    - pointers must be dereferenced to use the variable
    - pointers can change what they point to, references cannot
    - pointers can be null, references cannot
    - pointers can use pointer arithmatic while references cannot

Q: What is the difference between const char*, char const* and char* const?
A: const char* and char const* are both a pointer to a constant char. The pointer can be
   changed to point to another const char. char* const is a constant pointer to a char
   and cannot be changed to point to another char.

Q: What is function overloading?
A: When multiple functions have the same name but differ by number/type of arguments and 
   for pointer/reference arguments only whether const or non-const. It is a type of
   Polymorphism.

Q: What is a function pointer, and can you name a use?
A: A pointer that holds the address of a function. Used for callbacks and passing with events.

Q: What kind of values can be used as a default value?
A: Constant, ternary expressions, global and static variables, static and non-member functions

Q: How do you take the address of an overloaded function?
A: You need to cast it to the overload you require: (void(MyClass::*)(double))&MyClass::MyMethod

Q: Is there a way to inline a function without using the inline keyword?
A: The compiler will ultimately determine what is inlined or not. By giving the function 
   declaration a body in the header file this suggests inlining without the inline keyword.

Q: What are the five operators that cannot be overloaded.
A: .       The membership operator
   .*      The pointer-to-member operator
   ::      The scope-resolution operator
   ?:      The conditional operator
   sizeof  The sizeof operator

Q: How are prefix and postfix versions of operator++() differentiated?
A: Prefix returns a reference to the object after incrementing
   Postfix returns a copy to the object before incrementing

Q: What is a conversion or cast operator, and provide an example where one might be useful?
A: Allows casting the class object to a different variable type, useful for casting between user-defined types

Q: Name a circumstance where the compiler will invisibly generate a temporary due to operator overloading.
A: If there is no direct match for the given argument and a match where the compiler can implicitly cast.

Q: What is the purpose of the extern keyword?
A: For global variables it allows external access accross multiple files

Q: What determines the construction order for global objects and static members, and why could it be a problem?
A: Global and static members are initialised before the application but there is no guarantee of initialisation 
   order. This can be a problem is some global or static members rely on others for initialisation.

Q: What is the difference between public, protected and private inheritance?
A: Public: base public can be accessed by everything, base protected can be accessed by derived class hierarchy
   Protected: base public/protected can only be accessed by derived class hierarchy
   Private: base public/protected can only be accessed by first derived class

Q: Why does changing the private members of a class cause recompilation of anything using the class?
A: Private data members can change the size of the object and participate in function overload resolution

Q: What is the difference between a structure and class?
A: Structure members/inheritance public by default, class members/inheritance private by default

Q: What is a default constructor and when does the compiler automatically generate one? 
A: An implicitly created function that initialises the class. It is created when
     - A constructor is not explicitly defined
     - There are no members that cannot be assigned automatically (const, references)
     - The default signature is not defined with = delete

Q: What is the difference between a copy constructor and a copy assignment operator?
A: A copy constructor is used to initialised a new object with the values of a given object
   A copy assignment operator is used to equalise the object with the already constructed given object

Q: When do you need to provide a copy constructor and assignment operator?
A: When there are members that cannot be automatically copied (reference variables)
   When deep copying is required

Q: What is a conversion constructor, and when does the compiler automatically call one? 
A: A constructor with a single argument without the explicit keyword. 
   It is automatically called when the argument type is assigned to the object.

Q: Name two situations where you must use an initialisation list as opposed to assignment in constructors. 
A: For const and reference members

Q: Can the 'this' pointer be used inside a constructor?
A: Yes however it is dangerous to do so for virtual methods

Q: Will the compiler execute items in the initialiser list in the order that they appear in the list?
A: No. They will execute in the order they appear in the class

Q: What is the purpose of the explicit keyword?
A: For single argument constructors to prevent implicit casts from the argument type to the class type

Q: Why might a class have a private destructor?
A: If the class wishes to manage destruction itself ie. for reference counted objects

Q: How is a virtual function different to a normal function?    
A: It can be redefined in a derived class to provide a different implementation
   At runtime, depending on the calling object the correct implementation is chosen

Q: How do you define an abstract base class, and what is its purpose?
A: It prevents any instances of the class from being constructed. Defined by =0 after any method.

Q: When is a virtual destructor necessary?
A: When the class expects to be inherited from. If not made virtual, any deletion of the derived object 
   from its base class pointer will result in only the base destructor being called.

Q: What is a v-table and how is it represented?
A: Vtbl is array of function addresses for a class that has virtual functions in the static data segment
   Usually stored as a static array generated at compile-time though exact implementation compiler specific

Q: What are the hidden data members of a class and when are they created?
   vtble pointer: when a class has virtual functions 
   virtual base: when virtual multiple inheritance with a shared base class is used

Q: What implications does the v-table have for usage of byte manipulating functions such as memset?
A: memset only works on POD types as it overwrites the give bytes with a value. This is bad for using it to 
   initialise anything non-POD as it can overwrite the hidden pointer to the vtble and pointers to virtual bases.

Q: Are virtual functions slow? Explain.
A: They are slower than a normal function call. The compiler does not know at compile-time which function will
   be called. Extra calls to the vtbl to find the correct address as well as not being able to use the normal 
   function optimizations such as inlining contributes to this speed.

Q: What are the typical performance bottlenecks in a C++ application?
A: Dynamic allocation, algorithm processing many inputs, inserting/deleting in containers

Q: Why should you always catch a const reference?
A: Const is used to prevent the exception from being modified and giving incorrect crash information
   Reference is used so the exception can be resolved polymorphically and so slicing does not happen
   Reference is used instead of pointer to reduce the need to manage any memory at the catch position
   Allocating memory for an exception through a pointer may not work if the exception is out of memory.

Q: What are the 3 types of Generic Type Deduction?
A: Template type deduction ignores reference/pointer-ness; keeps const except for by-val passing.
   Auto type deduction is same as template but assumes {} is std::initializer_list.
   Decl type deduction does not ignore reference/poiner-ness; keeps const.

Q: What is the difference between scoped and unscoped enums?
A: Unscoped enums have compiler dependent underlying type, pollute namespace and auto convert to int
   Scoped enums have int underlying type, don't pollute namespace and require cast to int
   Scoped enums may also define custom methods

Q: Why is =delete preferred over ommitting a definition for undesired methods?
A: It gives a compile time error rather than a linker error

Q: What kinds of types cannot by used as members of unions?
A: Objects with non-trivial constructors, destructor, assignment op, inheritance and virtual functions.

Q: Which C++ cast has no C-style equivalent?
A: dynamic_cast

Q: When does an objects lifetime begin/end?
A: On full completion of constructor it begins, on start of destructor it ends

Q: What happens when a constructor emits an exception?
A: Construction has failed and the object never existed. The destructor does not need to be called.

Q: Why should destructors never throw?
A: If the stack is unwinding because of an exception and a destructor throws there are 2 exceptions occuring
   This is undefined behaviour and the program terminates

Q: Why is it dangerous to store the this pointer in a shared_ptr
A: Users of the object may also store it in a shared_ptr which means the memory is owned by two smart pointers
   If one smart pointer deletes it, the other does not know about it

Q: Can any arbitrary class be made exception safe without modifying its structure?
A: No, exception safety affects the class design

Q: What is design pattern that works on any class in order to give a near strong exception guarantee?
A: Pimpl idiom allows a second object of the class to be constructed easily and then no-throw swap 
   called on if no exceptions are thrown. It is only a near guarantee as constructing a new member 
   of the class may affect static or global variables.

Q: What is multiple inheritance and what complication does it bring?
A: The ability to inherit from more than one base class that isn't an interface.
   Using it the class may end up with more than one of the same base class (ie. diamond shaped)

Q: What is the underlying type of std::map?
A: Balanced binary tree

Q: What is the difference between myVector[0] and myVector.at(0)?
A: at() does bounds checking and operator[] does not

Q: What is the difference between myMap[0] and myMap.at(0)?
A: at() checks if key exists and throws if not while operator[] will add the key through 
   the default constructor if the item doesn't exist

Q: What is the additional cost, if any, with passing functors to the standard algorithms?
A: Functors are passed by-val for each element iterated over. If the functor is not POD then it could be costly.
   In-built functors however are faster than passing lambdas/function pointers due to them being inlined

Q: Are the standard library containers exception safe and exception neutral?
A: Yes. It has at least a basic guarantee where objects will be still usable but not in a predictable state
   Many sections such as the containers generally have a strong guarantee.

Q: What are some of the performance issues with STL containers?
A: Possible cache misses when searching/iterating. Some containers are not in continous memory 
   Bigger the data size the more cache misses as elements don't fit in cache lines

Q: What is the Short String Optimization?
A: If the string capacity is <= 15 characters it is stored on the stack

Q: Why are the associative container keys const?
A: Sort order is determined by the key when a new member is inserted
   If the keys are changed the order will be corrupted

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ALGORITHM PUZZLES
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: Write a method to generate a random number between 1 and 7, 
   given a method that generates a random number between 1 and 5
A: If a result of 0 is ignored, there is an equal amount of 
   chance to get a value from 1-7 from the array:

int GetRand7()
{
    int values[5][5] = 
    {
        { 1, 2, 3, 4, 5 },
        { 6, 7, 1, 2, 3 },
        { 4, 5, 6, 7, 1 },
        { 2, 3, 4, 5, 6 },
        { 7, 0, 0, 0, 0 }
    };

    int result = 0;
    while (result == 0)
    {
        result = values[GetRand5()-1][GetRand5()-1];
    }
    return result;
}

==============================================================================================================

Q: Write an algorithm to solve a Tower of Hanoi with 3 rods and N disks using Stacks
A:
           _|_         |          |
          __|__        |          |
         ___|___       |          |
        ____|____  ____|____  ____|____
 
            |          |          |
          __|__        |          |
         ___|___      _|_         |
        ____|____  ____|____  ____|____ (A -> B)

            |          |          |
            |          |          |
         ___|___      _|_       __|__
        ____|____  ____|____  ____|____ (A -> C)

            |          |          |
            |          |         _|_
         ___|___       |        __|__
        ____|____  ____|____  ____|____ (A -> C)

            |          |          |
            |          |         _|_
            |       ___|___     __|__
        ____|____  ____|____  ____|____ (A -> B)

            |          |          |
            |          |          |
           _|_      ___|___     __|__
        ____|____  ____|____  ____|____ (C -> A)

            |          |          |
            |        __|__        |
           _|_      ___|___       |
        ____|____  ____|____  ____|____ (C -> B)

            |         _|_         |
            |        __|__        |
            |       ___|___       |
        ____|____  ____|____  ____|____ (A -> B)

void Hanoi(int n, std::stack<int>& a, std::stack<int>& b, std::stack<int>& c)
{
    if(n != 0)
    {
        Hanoi(n-1, a, c, b);
        c.push(a.top());
        a.pop();
        Hanoi(n-1, b, a, c);
    }
}

==============================================================================================================

Q: You are given an array with integers (both positive and negative) in any random order. 
   Find the continuous sub-array with the largest sum.
A: See Kadane's Algorithm in Algorithms.cpp for code

==============================================================================================================

Q: Write a function that computes the factorial of a number. 
   Now write it again without using recursion.
A: See General Algorithms in Algorithms.cpp for code

==============================================================================================================

Q: What is the number of right trailing 0 bits in a 32-bit unsigned integer?
A: Obtain the value of the bit from position 0 to 31 and break if not a 0

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//STRING PUZZLES
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: Implement an algorithm to determine if a string has all unique characters. 
   What if you can not use additional data structures?
A: Set will automatically remove any duplicates but requires an extra structure
   Sorting may use space depending on how std::sort is implemented (usually a quick sort)
   If no sorting is allowed, must check every character against the others in O(N²)

bool HasUniqueCharacters(std::string str)
{
    std::set<char> characters(str.begin(), str.end());
    return characters.size() == str.size();
}

bool HasUniqueCharactersNoContainer(std::string str)
{
    if (str.size() >= 2)
    {
        std::sort(str.begin(), str.end(), std::less<char>());
        for (int i = 1; i < str.size(); ++i)
        {
            if (str[i] == str[i-1])
            {
                return false;
            }
        }
    }
    return true;
}

==============================================================================================================

Q: Write code to reverse a C-Style String
A: For string literal (char* str = "x") characters cannot be changed so use char[]
   See String Algorithms in Algorithms.cpp for code

==============================================================================================================

Q: Implement an algorithm to remove all duplicates from a string without using any additional buffer
A: Erase-remove idiom, erase all instances after the current character at index i
   See String Algorithms in Algorithms.cpp for code

==============================================================================================================

Q: Implement an algorithm to determine if two strings are anagrams of each other
A: Use std::is_permutation, otherwise sort and check equality of strings
   See String Algorithms in Algorithms.cpp for code

==============================================================================================================

Q: Implement an algorithm to replace all spaces in a string with %20
A: boost::ireplace_all if boost is available, otherwise iterate
   See String Algorithms in Algorithms.cpp for code

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//LINKED LIST PUZZLES
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: Reverse a linked list
A: See Linked List Algorithms in Algorithms.cpp for code

==============================================================================================================

Q: Write code to remove duplicates from an unsorted linked list
   How would you solve this if temporary buffers are not allowed?
A: See Linked List Algorithms in Algorithms.cpp for code

==============================================================================================================

Q: Implement an algorithm to delete a node in the middle of a single linked list given only access to that node
A: The node to delete cannot have its memory location removed as the previous node will point to it
   Actually delete the node after it and copy its data into the node delete is requested for
   See Linked List Algorithms in Algorithms.cpp for code

==============================================================================================================

Q: Given a linked list where one node circles back to itself somewhere, 
   implement an algorithm which returns the node at the beginning of the circular loop
A: Compare address as its an unique identifier of a node
   See Linked List Algorithms in Algorithms.cpp for code

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//STACK PUZZLES
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: Implement a stack using either a linked list or dynamic array and justify your decision
A: Stack is a last-in-first-out structure. Dynamic arrays allow for random access which isn't required for
   a stack. They also need to resize if getting too large which can cause unecessary copying. A linked list
   doesn't require this copying although a disadvantage is the memory between elements can become fragmented.
   See Stack Algorithms in Algorithms.cpp for code.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//TREE PUZZLES
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: Implement a function to check if a tree is balanced-
   No two leaf nodes differ in distance from the root by more than one
A: Find min/max depth of tree and difference should be <=1 to be balanced
   See Tree Algorithms in Algorithms.cpp for code

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//LOGIC PUZZLES
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: You have two identical eggs. Standing in front of a 100 floor building, you wonder what is the 
   maximum number of floors from which the egg can be dropped without breaking it. What is the 
   minimum number of tries needed to find out the solution?

A: By dropping one egg on each floor until it breaks you can easily find the maximum floors. The maximum
   floors is 100 if it doesn't break until the last floor. The minimum tries can be found by by going up 
   floors by intervals and if the first egg breaks, test the second egg in between the interval:

   Interval of 2:  100 / 2 = 50  with Maximum tries = 50 + 1 = 51
   Interval of 3:  100 / 3 = 33  with Maximum tries = 33 + 2 = 35
   Interval of 4:  100 / 4 = 25  with Maximum tries = 25 + 3 = 28
   Interval of 5:  100 / 5 = 20  with Maximum tries = 20 + 4 = 24
   Interval of 6:  100 / 6 = 16  with Maximum tries = 16 + 5 = 21
   Interval of 7:  100 / 7 = 14  with Maximum tries = 14 + 6 = 20
   Interval of 8:  100 / 8 = 12  with Maximum tries = 12 + 7 = 19
   Interval of 9:  100 / 9 = 11  with Maximum tries = 11 + 8 = 19
   Interval of 10: 100 / 10 = 10 with Maximum tries = 10 + 9 = 19
   Interval of 11: 100 / 11 = 9 with Maximum tries = 9 + 10 = 19
   Interval of 12: 100 / 12 = 8 with Maximum tries = 8 + 11 = 19
   Interval of 13: 100 / 13 = 7 with Maximum tries = 16 + 12 = 19
   Interval of 14: 100 / 14 = 7 with Maximum tries = 7 + 13 = 20

   Minimum Tries = (100 / n) + (n - 1)
   Minimum Tries is 19 by going up with an interval of 8-13

==============================================================================================================

Q: Four people need to cross a rickety bridge at night. Unfortunately, they have only one torch and the 
   bridge is too dangerous to cross without one. The bridge is only strong enough to support two people at 
   a time. Not all people take the same time to cross the bridge. Times for each person: 1m, 2m, 7m, 10m. 
   What is the shortest time needed for all four of them to cross the bridge?

A: 1m and 2m go across the bridge = 2m
   1m goes back and passes over the torch = 1m
   7m and 10m goes across the bridge = 10m
   2m goes back with the torch = 2m
   1m and 2m go across the bridge = 2m
   Total: 17m

==============================================================================================================

Q: How would you cut a rectangular cake into two equal pieces when a rectangular piece has already been cut 
   out of it? The cut piece can be of any size and orientation. You are only allowed to make one straight cut.

A: Assuming a uniform cake, and the piece cut-out was to the height of the cake, cut horizonally across.
   For a non-uniform cake, cut a line intersecting both the center of the cake and center of the cut-out piece.

==============================================================================================================

Q: A duck that is being chased by a fox saves itself by sitting at the center of circular pond of radius r. 
   The duck can fly from land but cannot fly from the water. Furthermore, the fox cannot swim. The fox is 
   four times faster than the duck. Assuming that the duck and fox are perfectly smart, is it possible for 
   the duck to ever reach the edge of the pond and fly away to its escape from the ground?

A: If the duck tries to travel directly in the opposite vector to the duck-to-fox, it will take the fox one
   half circumference of the circle in distance to reach the point the duck will be at the pond edge.

   Fox Distance = πr
   Duck Distance = 4r
   As πr < 4r the fox would catch the duck

   If the duck however swims in circles at a radius of < r/4 the fox is continuously trying to catch up
   When the duck reaches a distance of r + 1/4r from the fox it only has to cover 3/4r to reach the edge
   In this case πr > 4 * (3/4r) and the duck would escape

==============================================================================================================

Q: In a country where everyone wants a boy, each family continues having babies till they have a boy. 
   After some time, what is the proportion of boys to girls in the country? 
   (Assuming probability of having a boy or a girl is the same)

A: There are n couples so therefore n boys
   ExpectedValue = Pr(x1)*v1 + Pr(x2)*v2 + ...
   Number of Girls = 0*(Pr(0 girls)) + 1*(Pr(1 girl)) + 2*(Pr(2 girls) + ...
   Number of Girls = 0*(n*0.5) + 1*(n*0.25) + 2*(n*0.125) + ...
   Number of Girls = n (after summing 4-5 children and beyond)
   Proportion = 1:1

==============================================================================================================

Q: A line of 100 airline passengers is waiting to board a plane. They each hold a ticket to one 
   of the 100 seats on that flight. Unfortunately, the first person in line is crazy, and will 
   ignore the seat number on their ticket, picking a random seat to occupy. All of the other 
   passengers are quite normal, and will go to their proper seat unless it is already occupied. 
   If it is occupied, they will then find a free seat to sit in, at random. 
   What is the probability that the last (100th) person to board the plane will sit in their proper seat?

A: If any passenger before the last sits in the first passenger's seat, the last passenger gets their 
   own seat.  If any passenger before the last sits in the last passenger's seat, the last passenger does 
   not get their own seat.  Because the passengers are choosing their seats uniformly at random, these 
   outcomes are equally likely, and so the probability that the last passenger gets their own seat is one half.


