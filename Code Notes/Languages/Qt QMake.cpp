/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// QT QMAKE
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*************************************************************************************************************
QMAKE:
• Run from top level directory of the project  
• Generates Makefiles from a project files (.pro) and includes build rules for moc and uic
• Project files include a list of source/header files, libraries, include paths, configuration info
• Project files can be auto-generated from Qt Creator wizard and qmake
• Should only use directory separator / regardless of platform

META-OBJECT COMPILER (MOC):
• Reads a .h file for classes with Q_OBJECT inheriting QObject
• Creates a .cpp file with meta-object code required for signals/slots, RTTI and dynamic properties
• Must be compiled and linked with the class

USER INTERFACE COMPILER (UIC):
• Reads a .ui file as generated by Qt Designer and creates a .h file
**************************************************************************************************************/

//===============================================================================================================
// RUNNING QMAKE
//===============================================================================================================

qmake -makefile [options] file1.pro file2.pro // output will be Makefiles (default)
qmake -project  [options] file.pro MyDir      // output will be a project (*.pro) file, accepts dirs
make /*or*/ nmake                             // generates exe from Makefiles

//GENERAL OPTIONS
-help               // output help information
-o [outputname]     // change the name of the output file
-d                  // output debug information
-t [template]       // change the template used in the project file (only after it's processed)
-Wall               // output all warnings
-Wnone              // output no warnings
-Wparser            // output only parser warnings
-Wlogic             // output warnings for problems in project file
-spec macx-g++      // change the platform to mac
-E                  // preprocess only; do not generate meta-object code

//MAKEFILE MODE OPTIONS
"CONFIG+=test"           // pass extra assignments, processed before .pro file
"CONFIG+=test" -after    // extra assignments processed after .pro file
-nocache                 // .qmake.cache file ignored
-nodepend                // don't generate dependency information	

//PROJECT MODE OPTIONS
-r                       // look through supplied directories excursively
-nopwd                   // only use supplied files, do not use current working directory

//===============================================================================================================
// PROJECT CONFIGURATION
//===============================================================================================================

TARGET = hello                 // name of the executable
VERSION = 1.2.3                
LANGUAGE  = C++
DESTDIR = "c:/MyPath"          // The directory to output the target executable
CONFIG += debug                // add configuration information to project
TEMPLATE = app                 // sets what type of project to build, overrides previously set
PRECOMPILED_HEADER = stdafx.h  
HEADERS += hello.h             	
FORMS = hello.ui               
SOURCES = hello.cpp main.cpp   // Can also just list instead of +=, use \ for newlines      
INCLUDEPATH += "c:/MyPath"     
MOC_DIR = "c:/MyPath"          // Where intermediate moc files are placed
OBJECTS_DIR = "c:/MyPath"      // Where intermediate objects are placed
DEFINES += MY_DEFINE           // Add a new #define MY_DEFINE, can be removed with -=
QT += xml                      // Add qt libraries to link against, core and gui already there by default
QT += widgets designer         // Requires lib template, builds a qt designer plugin

//OPERATORS
# This is a comment       // use &&LITERAL_HASH for actual #
$$value                   // Get contents of variable
$${value}                 // Same as $$value but allows adding to string values (eg. DEFINES = name_$${value})
$$[qmake_property]        // Get contents of qmake property
$$(env_variable)          // Get contents of environment variable when qmake is run
$(env_variable)           // Get contents of environment variable when makefiles are processed
$$replace_fn()            // Get return of a replace function
= value                   // Replace the value	
-= value                  // Subtract the value
+= value                  // Add the value
*= value                  // Only add if it hasn't already been added
~= expression             // Replaces any values that match a regular expression
MY_VAR = 0                // Create a new variable, all are lists by default even if one item assigned
MY_VAR = one two three    // Create a new variable with strings

//CONFIG OPTIONS
qt                        // Link against qt library
release                   // Build project in release, if 'debug' is also used, last one is only used
debug                     // Build project in debug, if 'release' is also used, last one is only used
debug_and_release         // The project is prepared to be built in both debug and release modes
debug_and_release_target  // Put debug/release builds in seperate directories (default)
build_all                 // Used with debug_and_release to build both debug and release
autogen_precompile_source // Automatically generates precompiled header files specified in .pro file
ordered                   // Used with subdirs template, directories should be processed in a given order
precompile_header         // Enables precompiled headers support
warn_on                   // Increase warning level from default
warn_off                  // Decrease warning level from default
exceptions                // Exception support enabled (default)
exceptions_off            // Exception support disabled
rtti                      // RTTI support enabled (by default, compiler default is used)
rtti_off                  // RTTI support disabled (by default, compiler default is used)
stl                       // STL support enabled (by default, compiler default is used)
stl_off                   // STL support disabled (by default, compiler default is used)
thread                    // Thread support is enabled (enabled by default)
c++11                     // C++11 support enabled, by default is disabled
c++14                     // C++14 support enabled, by default is disabled
opengl                    // Includes opengl support
windows                   // app Template only, Target is a Windows GUID application
console                   // app Template only, Target is a Win32 console application
testcase                  // app Template only, Target is an automated test
dll                       // lib Template only, The library is a shared library (dll).
staticlib                 // lib Template only, The library is a static library.
plugin                    // lib Template only, The library is a plugin.

//TEMPLATE OPTIONS
app                           // creates Makefile to build an application (default)
lib                           // creates Makefile to build a library
aux                           // creates Makefile to build nothing, used fo interpreted languages
subdirs                       // creates Makefile to use project files in each subdirectory
vcapp                         // creates Visual Studio Project file to build an application
vclib                         // creates Visual Studio Project file to build a library
vcsubdirs                     // creates Visual Studio Solution file to build projects in sub-directories 
                              
//CONDITIONAL SCOPE                  
debug {}                      // do if debug configuration, can use any config options
!debug {}                     // do if not debug configuration
win32 {}                      // do if windows configuration
win32:debug {}                // can combine nested scopes
win32|macx {}                 // do if either is true
win32:DEFINES += TEST         // add only if win32
for(var, $$MY_LIST) {}        // takes a list variable eg. list(one two three)
if(expression) {} else {}
win32 {} else:macx {} else {}

//FUNCTIONS
include(other.pro)               // Include another project file
log("Message")                   // Same as message() but without line break
error("String")                  // Print an error and exits
message("String")                // Prints a message
warning("String")                // Prints a warning
prompt("String")                 // Shows a dialog prompt and returns answer
mkpath("c:/MyPath")              // Creates a new path
requires(expression)             // Evaluates expression, if false, qmake skips file
system("cd Folder")              // Execute using the command line
unset(MY_VAR)                    // Undefines variable

//TEST FUNCTIONS
//Return bool, can be used as fn(){}, putting ! in front negates
CONFIG(option)                     // Succeeds if config option is on
contains(MY_VAR, value)            // Succeeds if MY_VAR contains value
count(MY_VAR, n)                   // Succeeds if contains a list with n values
debug(level, "String")             // Succeeds if qmake debug level is set, prints message if so
defined(MY_VAR)                    // Succeeds function or variable name is defined
equals(MY_VAR, value)              // Succeeds if MY_VAR equals value, can use isEqual()
eval(expression)                   // Succeeds if expression succeeds, same as if block
exists(main.cpp)                   // Succeeds if file exists
greaterThan(MY_VAR, value)         // Succeeds if MY_VAR > value
infile("file.txt", MY_VAR, value)  // Succeeds if file contains variable with name and optionally value
isEmpty(MY_VAR)                    // Succeeds if MY_VAR is empty or has no value

//REPLACE FUNCTIONS
//To use return value, put $$ in front
absolute_path("file.txt")        // Returns path as absolute
relative_path("c:/file.txt")     // Returns path as relative
basename("MyPath/file.txt")      // Returns file name
cat("file.txt")                  // Returns contents of file
clean_path("MyPath/file.txt")    // Returns normalized path, converts to / and removes .
dirname("MyPath/file.txt")       // Returns directory of file	
enumerate_vars()                 // Returns list of all defined variable names
find(MY_VAR, expression)         // Returns all the values in MY_VAR that match the regex
files(expression, true)          // Returns list of files using regex from working dir, true for recursion
first(MY_VAR)                    // Returns first of MY_VAR if a list
last(MY_VAR)                     // Returns last of MY_VAR if a list
getenv(MY_ENV_VAR)               // Returns value of env var, supports var names with () in them
join(MY_VAR, , prefix, suffix)   // Returns MY_VAR with suffix and prefix (both optional)
list(one two three)              // Returns a list of strings
lower(MY_VAR, MY_VAR2...)        // Takes n values and converts them to lower case
upper(MY_VAR, MY_VAR2...)        // Takes n values and converts them to upper case
member(MY_LIST, start, end)      // Returns slice of list between zero-based indices, use str_member() for strings
num_add(MY_VAR, MY_VAR2...)      // Takes n values and returns sum
re_escape("String")              // Returns string with regular expression characters escaped with a backslash
quote("String")                  // Adds " to a string
sprintf("String", MY_VAR...)     // Replaces %1-%9 in string with variables
reverse(MY_VAR)                  // Returns value of MY_VAR in reverse order
size(MY_VAR)                     // Returns number of values in MY_VAR, use str_size() for strings
sorted(MY_VAR)                   // Returns list of ascended sorted values in MY_VAR	
split(MY_VAR, delim)             // Returns a list of MY_VAR seperated by delim
take_first(MY_VAR)               // Returns the first item and pops it
take_last(MY_VAR)                // Returns the last item and pops it
unique(MY_VAR)                   // Returns MY_VAR with any duplicate items removed

//REPLACE FORMAT FUNCTIONS
//Floating-point numbers are currently not supported
format_number(value, obase=16)   // Returns decimal number in hex
format_number(value, ibase=16)   // Returns hex number in decimal
format_number(value, width=n)    // Sets the min width of the output, if output shorter, pads with spaces
format_number(value, zeropad)    // Pads the output with 0 instead of spaces
format_number(value, padsign)    // Prepends a space to positive values in the output
format_number(value, alwayssign) // Repends a plus sign to positive values in the output
format_number(value, leftalign)  // Places the padding to the right of the value in the output

//===============================================================================================================
// QMAKE PROPERTIES
//===============================================================================================================

qmake -set "QT_VERSION" value    // set the property
qmake -query "QT_VERSION"        // query the property
qmake -query                     // queries all property/value pairs
$$[QMAKE_VERSION]                // query the property in a project file

QMAKE_VERSION             // the current version of qmake
QT_INSTALL_ARCHDATA       // location of general architecture-dependent Qt data
QT_INSTALL_BINS           // location of Qt binaries (tools and applications)
QT_INSTALL_CONFIGURATION  // location for Qt settings. Not applicable on Windows
QT_INSTALL_DATA           // location of general architecture-independent Qt data
QT_INSTALL_DOCS           // location of documentation
QT_INSTALL_EXAMPLES       // location of examples
QT_INSTALL_HEADERS        // location for all header files
QT_INSTALL_IMPORTS        // location of QML 1.x extensions
QT_INSTALL_LIBEXECS       // location of executables required by libraries at runtime
QT_INSTALL_LIBS           // location of libraries
QT_INSTALL_PLUGINS        // location of Qt plugins
QT_INSTALL_PREFIX         // default prefix for all paths
QT_INSTALL_QML            // location of QML 2.x extensions
QT_INSTALL_TESTS          // location of Qt test cases
QT_INSTALL_TRANSLATIONS   // location of translation information for Qt strings
QT_SYSROOT                // the sysroot used by the target build environment
QT_VERSION                // the Qt version
  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// QT CMAKE
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

find_package(Qt5 COMPONENTS Core Widgets Quick)
qt5_add_resources(RESOURCES resources/myResources.qrc)
add_executable(exe_name ${SRC_LIST} ${RESOURCES})
qt5_use_modules(exe_name Core Widgets Quick)
  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// QT RESOURCES
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*************************************************************************************************************
• Allows storing resource files as binary in executable
• To add to exe, add RESOURCES = myResources.qrc to .pro file
• Access using qrc:///file.ext, paths relative to .qrc file
**************************************************************************************************************/

<RCC>
    <qresource prefix="/MyResources"> // Prefix optional
        <file>file.ext</file>
        <file alias="file.ext">path/file.ext</file>
    </qresource>
    <qresource prefix="/MyResources" lang="fr">
        <file>file.ext</file> // Will use instead if language matches
    </qresource>    
</RCC>  
