////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//QT MODULES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QtCore               Core non-graphical classes used by other modules
QtGUI                Base classes for graphical user interface (GUI) components. Includes OpenGL
QtMultimedia         Classes for audio, video, radio and camera functionality
QtMultimediaWidgets  Widget-based classes for implementing multimedia functionality
QtNetwork            Classes to make network programming easier and more portable
QtQML                Classes for QML and JavaScript languages
QtQuick              A declarative framework for building highly dynamic applications with custom UI
QtQuickControls      Reusable Qt Quick based UI controls to create classic desktop-style user interfaces
QtQuickDialogs       Types for creating and interacting with system dialogs from a Qt Quick application
QtQuickLayouts       Layouts are items that are used to arrange Qt Quick 2 based items in the UI
QtSQL                Classes for database integration using SQL
QtTest               Classes for unit testing Qt applications and libraries
QtWidgets            Classes to extend Qt GUI with C++ widgets

LIBRARY: Set of functions, organized in classes, that does some work and then returns control to the client
FRAMEWORK: An abstract design that you need to insert into, through inheritance or callbacks, that the framework then calls
TOOLKIT: More focused library, used almost exclusively for graphical widgets, and GUI components

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//QT LICENSING
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

COMMERCIAL:
• Official Qt Support Helpdesk
• Keep your application private
• Full rights to proprietary Qt source code modifications

GENERAL PUBLIC LICENSE (GPL):
• Requires releasing the source code of your application if distributing the open source software 
• All portions of the project must be under GPL as well
• Can use static linking
• Needs to include qt source code or instructions on how to access it

LESSER GENERAL PUBLIC LICENSE (LGPL):
• Allows distributing the open source software with your application without releasing the application source
• LGPL open source software must be re-distributed as LGPU, other portions of project may have different licences
• Possible to keep your application private with dynamic linking
• Needs to include qt source code or instructions on how to access it

QT FOR APPLICATION DEVELOPMENT: 
  • Cross platform development for desktop and mobile
  • Can be licensed under commercial and open source licenses (GPU / LGPU)
  • Some modules GPU only: QtDataVisualization / QtCharts / Tooling (if modifications are done)
  
QT FOR DEVICE CREATION: 
  • Used with embedded devices
  • Only under commercial licence to allow integration with proprietary code 
  
GPLv2 vs. GPLv3
• GPLv3 added compatibility regulations that make it easier to combine GPL code and code under different licenses
• GPLv3 adds regulations for digital rights management were added to keep GPL software from being changed at will
• GPLv3 adds an explicit patent license/copyright so that no one can profit from them
  
LGPLv2.1 vs. LGPLv3
• LGPLv3 closes loophole of locked-down consumer devices preventing users from installing
  modified versions of the library on the device

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//QT PROJECT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    app.exec(); // Start the event loop
}

===============================================================================================================
QMAKE
===============================================================================================================
• Run from top level directory of the project  
• Generates Makefiles from a project files (.pro)
• Includes build rules for moc and uic

qmake -o Makefile hello.pro             // generate Makefiles
qmake -tp vc hello.pro                  // generate visual studio project
make /*or*/ nmake                       // generates exe from Makefiles

===============================================================================================================
PROJECT FILES (.pro)
===============================================================================================================
• List of source/header files, libraries, include paths, configuration info
• Can be auto-generated from Qt Creator wizard and qmake

TARGET = hello          // name of the executable
CONFIG += debug         // add debug symbols/information
CONFIG += console       // show console window
HEADERS += hello.h
SOURCES += hello.cpp
SOURCES += main.cpp
win32 {}                // anything inside used only if windows
debug {}                // anything inside used if debug configuration
win32:debug {}          // can combine nested scopes
exists(main.cpp) {}     // do code inside if file exists, !exists(){} for negative
error("error")          // print an error

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//DEBUGGING AIDS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//RESOURCE FILES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//APPLICATION SETTINGS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//LOCALIZATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//QOBJECT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
===============================================================================================================
MEMORY MANAGEMENT
===============================================================================================================

===============================================================================================================
META-OBJECT SYSTEM
===============================================================================================================

===============================================================================================================
SIGNALS AND SLOTS
===============================================================================================================

===============================================================================================================
EVENTS AND EVENT HANDLING
===============================================================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//QT COMPONENTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

===============================================================================================================
QSTRING
===============================================================================================================

===============================================================================================================
QSignalMapper
===============================================================================================================

===============================================================================================================
QTimer
===============================================================================================================

===============================================================================================================
QT METATYPE SYSTEM AND QVARIANT
===============================================================================================================

===============================================================================================================
CONTAINERS
===============================================================================================================

===============================================================================================================
FILESYSTEM
===============================================================================================================

===============================================================================================================
WIDGETS
===============================================================================================================

===============================================================================================================
LAYOUTS
===============================================================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//QT MODELING LANGUAGE (QML)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////


